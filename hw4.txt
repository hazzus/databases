1. 1NF
Начнем с ФЗ выведенных в прошлом дз
StudentId -> StudentName, GroupId
GroupId -> GroupName
GroupName -> GroupId
CourseId -> CourseName
LecturerId -> LecturerName
GroupId, CourseId -> LecturerId
StudentId, CourseId -> Mark

Они в 1NF: нет повторяющихся групп, у отношения есть ключ (выведенный в прошлом дз (StudentId, CourseId)), все атрибуты атомарны.

В 2NF:
Слева должны быть ключи или неключевые атрибуты, или неключевой + подключ. Для этого отдезкомпозируем все ФЗ неуд условию. оставляем нужные отношения.


В 3NF:
Слева только ключи + 2NF.
Выберем неуд этому условию ФЗ. Декомпозируем отношение 2 по 1

В 4NF
Нет нетривиальных МЗ (приведем к НФБК)
3НФ без пересекающихся ключей = НФБК

В 5NF


use dat;

DROP TABLE IF EXISTS Groups CASCADE;
DROP TABLE IF EXISTS Students CASCADE;
DROP TABLE IF EXISTS Courses CASCADE;
DROP TABLE IF EXISTS Lecturers CASCADE;
DROP TABLE IF EXISTS Scores CASCADE;
DROP TABLE IF EXISTS StudyPlan CASCADE;
DROP TYPE IF EXISTS Mark;

CREATE TABLE Groups
(
  id   DECIMAL(5) NOT NULL PRIMARY KEY,
  name CHAR(5)    NOT NULL UNIQUE
);

CREATE TABLE Students
(
  id         DECIMAL(6)  NOT NULL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  surname    VARCHAR(50) NOT NULL,
  patronymic VARCHAR(50),
  group_id   DECIMAL(5)  NOT NULL,
  FOREIGN KEY (group_id) REFERENCES Groups (id)
);

CREATE TABLE Courses
(
  id   DECIMAL(5)  NOT NULL PRIMARY KEY,
  name VARCHAR(50) NOT NULL
);

CREATE TABLE Lecturers
(
  id         DECIMAL(6)  NOT NULL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  surname    VARCHAR(50) NOT NULL,
  patronymic VARCHAR(50)
);

CREATE TYPE Mark AS ENUM ('FX', 'F', 'E', 'D', 'C', 'B', 'A');

CREATE TABLE Scores
(
  student_id DECIMAL(6) NOT NULL,
  course_id  DECIMAL(5) NOT NULL,
  score      Mark       NOT NULL,
  PRIMARY KEY (student_id, course_id),
  FOREIGN KEY (student_id) REFERENCES Students (id),
  FOREIGN KEY (course_id) REFERENCES Courses (id)
);

CREATE TABLE StudyPlan
(
  course_id   DECIMAL(5) NOT NULL,
  group_id    DECIMAL(5) NOT NULL,
  lecturer_id DECIMAL(6) NOT NULL,
  PRIMARY KEY (course_id, group_id),
  FOREIGN KEY (course_id) REFERENCES Courses (id),
  FOREIGN KEY (group_id) REFERENCES Groups (id),
  FOREIGN KEY (lecturer_id) REFERENCES Lecturers (id)
);


INSERT INTO Groups(id, name)
VALUES (1, 'M3435'),
       (2, 'M3436'),
       (3, 'M3437'),
       (4, 'M3439');

INSERT INTO Students (id, name, group_id)
VALUES (1, 'Павел Безбородов', 2),
       (2, 'Константин Ништ', 4),
       (3, 'Николай Захарвич', 3),
       (4, 'Полина Бурцева', 1);

INSERT INTO Courses (id, name)
VALUES (1, 'Язык C++'),
       (2, 'ТФКП'),
       (3, 'Базы данных');

INSERT INTO Lecturers (id, name)
VALUES (1, 'Георгий Корнеев'),
       (2, 'Иван Сорокин'),
       (3, 'Константин Кохась');

INSERT INTO Studies (course_id, group_id, lecturer_id)
VALUES (1, 2, 2),
       (1, 3, 2),
       (1, 4, 2),
       (2, 3, 3),
       (3, 4, 1),
       (3, 2, 1);

INSERT INTO Marks (student_id, course_id, mark)
VALUES (1, 1, 100),
       (1, 2, 61),
       (1, 3, 100),
       (2, 1, 100),
       (2, 2, 100),
       (2, 3, 95),
       (3, 2, 67),
       (4, 1, 89),
       (4, 3, 100);
